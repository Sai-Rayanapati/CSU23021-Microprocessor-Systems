


ARM Macro Assembler    Page 1 


    1 00000000         ; 64-bit Factorial Calculator Pogram
    2 00000000         ; (c) Vitali Borsak, 2021.
    3 00000000         
    4 00000000                 area             progmain,code,readonly
    5 00000000                 export           __main
    6 00000000         __main
    7 00000000         
    8 00000000 E59F2084        ldr              r2,=testData
    9 00000004 E59F3084        ldr              r3,=result
   10 00000008 E3A04004        mov              r4,#4
   11 0000000C         
   12 0000000C         while1                               ; loop to go throug
                                                            h all 4 input varia
                                                            bles
   13 0000000C E3540000        cmp              r4,#0
   14 00000010 0A000005        beq              stop
   15 00000014 E4920004        ldr              r0,[r2],#4
   16 00000018 EB000004        bl               fact
   17 0000001C         
   18 0000001C E4830004        str              r0,[r3],#4  ; store the answer'
                                                            s least-significant
                                                             bits into memory, 
                                                            offset by 4
   19 00000020 E4831004        str              r1,[r3],#4  ; store the answer'
                                                            s most-significant 
                                                            bits into memory, o
                                                            ffset by 4
   20 00000024 E2444001        sub              r4,#1
   21 00000028 EAFFFFF7        b                while1
   22 0000002C         
   23 0000002C EAFFFFFE 
                       stop    b                stop
   24 00000030         
   25 00000030         fact
   26 00000030 E92D401C        stmfd            sp!,{r2-r4,lr} ; store the info
                                                            rmation in the regi
                                                            sters that are to b
                                                            e used on the stack
                                                            
   27 00000034         
   28 00000034 E3500000        cmp              r0,#0       ; call fact recursi
                                                            vley, subtracting 1
                                                             from r0 each time 
                                                            and storing the val
                                                            ues in r1 and r2 un
                                                            til we hit r0=0
   29 00000038 0A000010        beq              foundLast
   30 0000003C E1A02000        mov              r2,r0
   31 00000040 E1A01000        mov              r1,r0
   32 00000044 E2400001        sub              r0,#1
   33 00000048 EBFFFFF8        bl               fact
   34 0000004C         
   35 0000004C E1803001        orr              r3,r0,r1    ; check if the two 
                                                            registers are equal
                                                             to zero, if so, sk
                                                            ip multiplication
   36 00000050 E3530000        cmp              r3,#0
   37 00000054 0A000004        beq              skipMul
   38 00000058 E0831192        umull            r1,r3,r2,r1 ; multiply what's i



ARM Macro Assembler    Page 2 


                                                            n the answer's leas
                                                            t-significant regis
                                                            ter by r2 (which wa
                                                            s r0 but saved for 
                                                            future use when cal
                                                            ling the function r
                                                            ecursively)
   39 0000005C         ; store answer back into r1 and the carry (if any) into 
                       r3
   40 0000005C E0840092        umull            r0,r4,r2,r0 ; multiply what's i
                                                            n the answer's most
                                                            -significant regist
                                                            er by r2 (which was
                                                             r0 but saved for f
                                                            uture use when call
                                                            ing the function re
                                                            cursively)
   41 00000060         ; store andwer back into r0 and the carry (if any) into 
                       r4
   42 00000060 E0800003        add              r0,r0,r3    ; add the carry (r3
                                                            ) from the answer's
                                                             least-significant 
                                                            register's multipli
                                                            cation to the answe
                                                            r's most-significan
                                                            t register
   43 00000064         
   44 00000064 E2544000        subs             r4,#0       ; check if the carr
                                                            y of the multiplica
                                                            tion of the answer'
                                                            s most-significant 
                                                            register produced a
                                                             carry, if so set t
                                                            he carry flag
   45 00000068 0A000004        beq              foundLast
   46 0000006C         skipMul
   47 0000006C E3A00000        mov              r0,#0
   48 00000070 E3A01000        mov              r1,#0
   49 00000074 E3A04202        mov              r4,#0x20000000
   50 00000078 E128F004        msr              cpsr_f,r4
   51 0000007C EA000001        b                carry
   52 00000080         
   53 00000080         foundLast
   54 00000080 E3A04000        mov              r4,#0x00000000 ; if there was n
                                                            o carry of the mult
                                                            iplication of the a
                                                            nswer's most-signif
                                                            icant register then
                                                             the carry flag is 
                                                            set to 0
   55 00000084 E128F004        msr              cpsr_f,r4
   56 00000088         carry
   57 00000088 E8BD801C        ldmfd            sp!,{r2-r4,pc} ; pop the inform
                                                            ation on the stack 
                                                            back into it's resp
                                                            ective registers
   58 0000008C         
   59 0000008C 00000000 
              00000000         area             progdata,data,readonly



ARM Macro Assembler    Page 3 


   60 00000000 00000005 
              0000000E 
              00000014 
              0000001E testData
                               dcd              5,14,20,30
   61 00000010         
   62 00000010                 area             progstoredata,data,readwrite
   63 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    result  space            4*8
   64 00000020         
   65 00000020                 end
Command Line: --debug --diag_suppress=9931 --apcs=interwork --depend=.\objects\
tcd.d -o.\objects\tcd.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Includ
e -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 529" --list=.\listings\tcd.lst TCD.s
