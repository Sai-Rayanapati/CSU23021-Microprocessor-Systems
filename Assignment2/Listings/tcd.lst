


ARM Macro Assembler    Page 1 


    1 00000000         ; Program makes the LED's in P1.23--P1.16 light up in co
                       rrespondance to a number, which is controlled by the
    2 00000000         ; buttons P1.27--P1.24 
    3 00000000         ; -P1.27: Shift right by 1 bit
    4 00000000         ; -P1.26: Shift left by 1 bit
    5 00000000         ; -P1.25: Subtract 1
    6 00000000         ; -P1.24: Add 1
    7 00000000         ; (c) Vitali Borsak, 2021.
    8 00000000         
    9 00000000                 area             tcd,code,readonly
   10 00000000                 export           __main
   11 00000000         __main
   12 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   13 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   14 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   15 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   16 00000000         
   17 00000000 E59F0134        ldr              r0,=IO1DIR
   18 00000004 E3A048FF        mov              r4,#0x00ff0000 ; select P1.23--
                                                            P1.16
   19 00000008 E5804000        str              r4,[r0]     ; make them outputs
                                                            
   20 0000000C E59F212C        ldr              r2,=IO1CLR
   21 00000010 E5824000        str              r4,[r2]     ; set them to turn 
                                                            the LEDs off
   22 00000014 E59F1128        ldr              r1,=IO1SET
   23 00000018 E59F3128        ldr              r3,=IO1PIN
   24 0000001C         
   25 0000001C         whloop1
   26 0000001C E5934000        ldr              r4,[r3]     ; infinite loop tha
                                                            t checks if any of 
                                                            the buttons were pr
                                                            essed
   27 00000020 E3A0540F        mov              r5,#0x0f000000
   28 00000024 E0044005        and              r4,r5
   29 00000028         
   30 00000028 E354040F        cmp              r4,#0x0f000000
   31 0000002C 0AFFFFFA        beq              whloop1
   32 00000030         
   33 00000030 E354040E        cmp              r4,#0x0e000000 ; if button 24 i
                                                            s pressed, call the
                                                             add subroutine
   34 00000034 1A000001        bne              skip1       ; make sure that th
                                                            e correct correspon
                                                            ding subroutine is 
                                                            called
   35 00000038 EB000013        bl               add1
   36 0000003C EA00000B        b                whloop2     ; branch to whloop2
                                                             after subroutine i
                                                            s called
   37 00000040         
   38 00000040         skip1
   39 00000040 E354040D        cmp              r4,#0x0d000000 ; if button 25 i
                                                            s pressed, call the
                                                             subtract subroutin



ARM Macro Assembler    Page 2 


                                                            e
   40 00000044 1A000001        bne              skip2       ; make sure that th
                                                            e correct correspon
                                                            ding subroutine is 
                                                            called
   41 00000048 EB00001B        bl               sub1
   42 0000004C EA000007        b                whloop2     ; branch to whloop2
                                                             after subroutine i
                                                            s called
   43 00000050         
   44 00000050         skip2
   45 00000050 E354040B        cmp              r4,#0x0b000000 ; if button 26 i
                                                            s pressed, call the
                                                             shift left subrout
                                                            ine
   46 00000054 1A000001        bne              skip3       ; make sure that th
                                                            e correct correspon
                                                            ding subroutine is 
                                                            called
   47 00000058 EB000023        bl               shiftLeft1
   48 0000005C EA000003        b                whloop2     ; branch to whloop2
                                                             after subroutine i
                                                            s called
   49 00000060         
   50 00000060         skip3
   51 00000060 E3540407        cmp              r4,#0x07000000 ; if button 27 i
                                                            s pressed, call the
                                                             shift right subrou
                                                            tine
   52 00000064 1A000001        bne              skip4       ; make sure that th
                                                            e correct correspon
                                                            ding subroutine is 
                                                            called
   53 00000068 EB000029        bl               shiftRight1
   54 0000006C EAFFFFFF        b                whloop2     ; branch to whloop2
                                                             after subroutine i
                                                            s called
   55 00000070         
   56 00000070         skip4
   57 00000070         whloop2
   58 00000070 E5934000        ldr              r4,[r3]     ; keep going in the
                                                             loop until none of
                                                             the buttons are pr
                                                            essed
   59 00000074 E3A0540F        mov              r5,#0x0f000000
   60 00000078 E0044005        and              r4,r5
   61 0000007C         
   62 0000007C E354040F        cmp              r4,#0x0f000000
   63 00000080 1AFFFFFA        bne              whloop2
   64 00000084 EAFFFFE4        b                whloop1
   65 00000088         
   66 00000088 EAFFFFFE 
                       stop    b                stop
   67 0000008C         
   68 0000008C         add1
   69 0000008C E92D4030        stmfd            sp!,{r4-r5,lr} ; store the info
                                                            rmation in the regi
                                                            sters that are to b
                                                            e used on the stack



ARM Macro Assembler    Page 3 


                                                            
   70 00000090         
   71 00000090 E5934000        ldr              r4,[r3]     ; get all the bits 
                                                            in IO1PIN
   72 00000094 E3A058FF        mov              r5,#0x00ff0000 ; mask to get th
                                                            e relevant bits
   73 00000098 E0044005        and              r4,r5       ; remove unwanted b
                                                            its
   74 0000009C         
   75 0000009C E3A05801        mov              r5,#0x00010000 ; mask to add 1 
                                                            in the relevant loc
                                                            ation
   76 000000A0 E0844005        add              r4,r5       ; increment by 1 
   77 000000A4 E3A058FF        mov              r5,#0x00ff0000
   78 000000A8 E0044005        and              r4,r5       ; remove unecessary
                                                             bits in case of an
                                                             overflow
   79 000000AC         
   80 000000AC E5814000        str              r4,[r1]     ; store values back
                                                             into IO1SET
   81 000000B0 E0244005        eor              r4,r5       ; clear the empty b
                                                            its
   82 000000B4 E5824000        str              r4,[r2]     ; store the cleared
                                                             bits into IO1CLR
   83 000000B8 E8BD8030        ldmfd            sp!,{r4-r5,pc} ; pop the inform
                                                            ation on the stack 
                                                            back into it's resp
                                                            ective registers
   84 000000BC         
   85 000000BC         
   86 000000BC         sub1
   87 000000BC E92D4030        stmfd            sp!,{r4-r5,lr} ; store the info
                                                            rmation in the regi
                                                            sters that are to b
                                                            e used on the stack
                                                            
   88 000000C0         
   89 000000C0 E5934000        ldr              r4,[r3]     ; get all the bits 
                                                            in IO1PIN
   90 000000C4 E3A058FF        mov              r5,#0x00ff0000 ; mask to get th
                                                            e relevant bits
   91 000000C8 E0044005        and              r4,r5       ; remove unwanted b
                                                            its
   92 000000CC         
   93 000000CC E3A05801        mov              r5,#0x00010000 ; mask to add 1 
                                                            in the relevant loc
                                                            ation
   94 000000D0 E0444005        sub              r4,r5       ; decrement by 1
   95 000000D4 E3A058FF        mov              r5,#0x00ff0000
   96 000000D8 E0044005        and              r4,r5       ; remove unecessary
                                                             bits in case of an
                                                             overflow
   97 000000DC         
   98 000000DC E5814000        str              r4,[r1]     ; store values back
                                                             into IO1SET
   99 000000E0 E0244005        eor              r4,r5       ; clear the empty b
                                                            its 
  100 000000E4 E5824000        str              r4,[r2]     ; store the cleared
                                                             bits into IO1CLR



ARM Macro Assembler    Page 4 


  101 000000E8         
  102 000000E8 E8BD8030        ldmfd            sp!,{r4-r5,pc} ; pop the inform
                                                            ation on the stack 
                                                            back into it's resp
                                                            ective registers
  103 000000EC         
  104 000000EC         
  105 000000EC         shiftLeft1
  106 000000EC E92D4030        stmfd            sp!,{r4-r5,lr} ; store the info
                                                            rmation in the regi
                                                            sters that are to b
                                                            e used on the stack
                                                            
  107 000000F0         
  108 000000F0 E5934000        ldr              r4,[r3]     ; get all the bits 
                                                            in IO1PIN
  109 000000F4 E3A058FF        mov              r5,#0x00ff0000 ; mask to get th
                                                            e relevant bits
  110 000000F8 E0044005        and              r4,r5       ; remove unwanted b
                                                            its
  111 000000FC         
  112 000000FC E1A04084        mov              r4,r4,lsl #1 ; shift left by 1 
                                                            
  113 00000100 E0044005        and              r4,r5       ; remove unecessary
                                                             bits in case of an
                                                             overflow 
  114 00000104         
  115 00000104 E5814000        str              r4,[r1]     ; store values back
                                                             into IO1SET
  116 00000108 E0244005        eor              r4,r5       ; clear the empty b
                                                            its
  117 0000010C E5824000        str              r4,[r2]     ; store the cleared
                                                             bits into IO1CLR
  118 00000110 E8BD8030        ldmfd            sp!,{r4-r5,pc} ; pop the inform
                                                            ation on the stack 
                                                            back into it's resp
                                                            ective registers
  119 00000114         
  120 00000114         
  121 00000114         shiftRight1
  122 00000114 E92D4030        stmfd            sp!,{r4-r5,lr} ; store the info
                                                            rmation in the regi
                                                            sters that are to b
                                                            e used on the stack
                                                            
  123 00000118         
  124 00000118 E5934000        ldr              r4,[r3]     ; get all the bits 
                                                            in IO1PIN
  125 0000011C E3A058FF        mov              r5,#0x00ff0000 ; mask to get th
                                                            e relevant bits
  126 00000120 E0044005        and              r4,r5       ; remove unwanted b
                                                            its
  127 00000124         
  128 00000124 E1A040A4        mov              r4,r4,lsr #1 
                                                            ; shift right by 1 
                                                            
  129 00000128 E0044005        and              r4,r5       ; remove unecessary
                                                             bits in case of an
                                                             overflow 



ARM Macro Assembler    Page 5 


  130 0000012C         
  131 0000012C E5814000        str              r4,[r1]     ; store values back
                                                             into IO1SET
  132 00000130 E0244005        eor              r4,r5       ; clear the empty b
                                                            its
  133 00000134 E5824000        str              r4,[r2]     ; store the cleared
                                                             bits into IO1CLR
  134 00000138 E8BD8030        ldmfd            sp!,{r4-r5,pc} ; pop the inform
                                                            ation on the stack 
                                                            back into it's resp
                                                            ective registers
  135 0000013C         
  136 0000013C                 end
              E0028018 
              E002801C 
              E0028014 
              E0028010 
Command Line: --debug --diag_suppress=9931 --apcs=interwork --depend=.\objects\
tcd.d -o.\objects\tcd.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Includ
e -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 529" --list=.\listings\tcd.lst TCD.s
